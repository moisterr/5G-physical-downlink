function sym = generateSssSymbols(ncellid)
%nrSSS Secondary synchronization signal (simplified)
%   SYM = nrSSS(NCELLID) returns a real column vector SYM containing the
%   secondary synchronization signal (SSS) symbols as defined in TS 38.211
%   Section 7.4.2.3, given physical layer cell identity NCELLID (0...1007).
%
%   The output is always a real column vector of type double.

    % Validate input
    validateattributes(ncellid,{'numeric'}, ...
        {'scalar','integer','>=',0,'<=',1007},'nrSSS','NCELLID');

    % d_SSS0(m)
    d_SSS0 = [...
     -1   1   1   1   1   1   1  -1   1   1  -1   1   1  -1  -1   1  -1 ...
      1   1  -1  -1  -1  -1   1  -1  -1  -1   1   1   1   1  -1  -1  -1 ...
     -1  -1  -1  -1   1   1   1  -1  -1  -1   1  -1  -1   1   1   1  -1 ...
      1  -1   1   1  -1   1  -1  -1  -1  -1  -1   1  -1   1  -1   1  -1 ...
      1   1   1   1  -1   1  -1  -1   1  -1  -1  -1  -1   1   1  -1  -1 ...
     -1   1   1  -1   1  -1   1  -1  -1   1   1  -1  -1   1   1   1   1 ...
      1  -1  -1   1  -1  -1   1  -1   1  -1  -1  -1   1  -1   1   1   1 ...
     -1  -1   1   1  -1   1   1   1].';

    % d_SSS1(m)
    d_SSS1 = [...
     -1   1   1   1   1   1   1  -1   1   1   1   1   1  -1  -1   1   1 ...
      1   1  -1   1  -1   1   1   1  -1  -1  -1  -1   1   1  -1   1   1 ...
      1  -1   1  -1  -1   1   1  -1  -1  -1   1  -1   1  -1   1   1  -1 ...
     -1  -1  -1  -1   1  -1   1   1   1   1  -1  -1  -1   1   1   1  -1 ...
      1   1  -1   1   1  -1  -1   1  -1  -1   1  -1   1  -1  -1   1  -1 ...
     -1  -1  -1   1  -1  -1   1   1   1  -1  -1   1  -1   1   1  -1   1 ...
     -1  -1  -1   1  -1  -1  -1   1   1  -1  -1   1   1  -1   1  -1   1 ...
     -1   1  -1  -1  -1  -1  -1  -1].';

    % Cell ID decomposition
    n1 = fix(ncellid / 3);
    n2 = mod(ncellid, 3);
    m0 = 15 * fix(n1 / 112) + 5 * n2;
    m1 = mod(n1, 112);

    % Generate sequences
    seq0 = d_SSS0(1 + mod(m0 + (0:126), 127));
    seq1 = d_SSS1(1 + mod(m1 + (0:126), 127));
    sym = seq0 .* seq1;  % Final SSS sequence
end
